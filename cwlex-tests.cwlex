import "src/cwlex-dev.cwlex" as cwlex

def workflow main(
 cases = [
   [Directory("tests/antlr"), "antlr.cwlex", File("tests/antlr/antlr.cwl")],
   [Directory("tests/const"), "const_values.cwlex", File("tests/const/const_values.cwl")],
   [Directory("tests/quote"), "quote.cwlex", File("tests/quote/quote.cwl")],
   [Directory("tests/req"), "req.cwlex", File("tests/req/req.cwl")],
   [Directory("tests/site"), "cwlsite.cwlex", File("tests/site/cwlsite.cwl")],
   [Directory("tests/linkmerge"), "linkmerge.cwlex", File("tests/linkmerge/linkmerge.cwl")],
   [Directory("tests/assign"), "assign.cwlex", File("tests/assign/assign.cwl")],
   [Directory("tests/examples"), "reverse.cwlex", File("tests/examples/reverse.cwl")],
   [Directory("tests/examples"), "ex2.cwlex", File("tests/examples/ex2.cwl")],
   [Directory("tests/examples"), "ex3.cwlex", File("tests/examples/ex3.cwl")],
   [Directory("tests/examples"), "echo.cwlex", File("tests/examples/echo.cwl")],
   [Directory("tests/examples"), "ex5.cwlex", File("tests/examples/ex5.cwl")],
   [Directory("tests/examples"), "ex6.cwlex", File("tests/examples/ex6.cwl")],
   [Directory("tests/examples"), "ex7.cwlex", File("tests/examples/ex7.cwl")],
   [Directory("tests/examples"), "ex8.cwlex", File("tests/examples/ex8.cwl")],
   [Directory("tests/examples"), "ex9.cwlex", File("tests/examples/ex9.cwl")],
   [Directory("tests/examples"), "ex10.cwlex", File("tests/examples/ex10.cwl")],
   [Directory("tests/examples"), "ex11.cwlex", File("tests/examples/ex11.cwl")],
   [Directory("tests/examples"), "ex12.cwlex", File("tests/examples/ex12.cwl")],
   [Directory("tests/examples"), "ex13.cwlex", File("tests/examples/ex13.cwl")],
   [Directory("tests/examples"), "ex14.cwlex", File("tests/examples/ex14.cwl")],
   [Directory("tests/fedmigrate"), "fed-migrate.cwlex", File("tests/fedmigrate/fed-migrate.cwl")]
 ]
) {
  scatter cases do run workflow() {
    converted = cwlex(cases, inpdir=$(inputs.cases[0]), inpfile=$(inputs.cases[1]))
    run tool(cases=cases, converted) {
      diff -u $(inputs.cases[2]) $(inputs.converted) > $(inputs.cases[2].basename+".diff")
      return File(inputs.cases[2].basename+".diff") as results
    }
    return results
  }
}