Common Workflow Language experimental grammar.

This is an experimental human-friendly grammar that compiles to [CWL](http://commonwl.org) for execution.

Design principals:

* Don't repeat yourself
* Infer types where possible
* Inline declarations for things that are only used once
* Useful default behaviors when not specified
* Be fun to use

Note!  Although cwl-ex tool already offers a lot of functionality, the
error reporting still needs a lot of work.  If you are trying to use
it and running into problems, please file an issue.

# Installation:

```
npm install cwl-ex
```

# Usage

```
$ cwlex myscript.cwlex > myscript.cwl
```

# Syntax

## Command line tools

### Define a command line tool

Define a tool called `reverse`.  It takes an input parameter called
`msg` which is a `File`.  Run the command `rev` with `msg` as an
argument.  Redirect to `reversed.txt` and return `reversed.txt` as the
output parameter `reversed`.

```
$include: ex1.cwlex
```

### Run a shell script

You can put an arbitrary script between `<<<` and `>>>`.  It will be
created at runtime in a temporary file and added to the command line.

```
$include: ex2.cwlex
```

### Run in a Docker container

Use `DockerRequirement` to run the tool in a Docker container.

```
$include: ex3.cwlex
```

### Define default parameters

You can set default values for input parameters.

```
$include: ex4.cwlex
```

### Optional arguments

Optional parameters in the input have `?` after the parameter name.
After declaring the main command line, declare optional tool flags in
the form `? <prefix> <parameter>`.

```
$include: ex5.cwlex
```

### Array arguments

The `?` syntax is also used for array parameters.  `? for each in
<parameter>` will add each element in the array to the command line.
Use `? <prefix> for each in <parameter>` to add each item with a
leading option switch.

```
$include: ex6.cwlex
```

## Workflows

### Import and execute tools

Assign the output parameter `out` of `echo` to `e`.  Assign the output
parameter `reversed` of `reverse` to `r`.  The output of the workflow
is the output parameter `r`.

```
$include: ex7.cwlex
```

### Workflow with tools defined inline

When tools are defined inline, their outputs are implicitly added to
the scope, unless they are explicitly assigned (as in the example
above).  If there is no explicit `return`, the workflow will return
all parameters defined in the workflow.  In this example, the output
parameters are both `echoed` and `reversed`.

```
$include: ex8.cwlex
```

### Scatter a tool over an array

To run a parallel scatter over an array, use `scatter <parameter> do
...`.  The parameter named is added as in input to the tool.  The
output of the step will be an array of values consisting of the output
of each scatter step.

```
$include: ex9.cwlex
```

```
$include: ex10.cwlex
```

### Javascript expressions

Javascript expression tools can be declared and called.  Requires a type declaration after the inputs.

```
$include: ex11.cwlex
```

Use `run expr` to run a Javascript tool inline.  Requires a type declaration after the inputs.

```
$include: ex12.cwlex
```

### Constants and expressions in step inputs

Step inputs can assigned constant and expression values.

```
$include: ex13.cwlex
```

### Merging several parameters into a single parameter

```
$include: ex14.cwlex
```
